#!/usr/bin/env python3
"""
Vocabulary-V2 Project Starter
Generated by fix_all_projects.py
"""

import sys
import os
from pathlib import Path

# ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ï
PROJECT_NAME = "vocabulary-v2"
PROJECT_TYPE = "react"
PORT_RANGE = (3100, 3109)
DEFAULT_PORT = 3100

# template ÎîîÎ†âÌÜ†Î¶¨ Í≤ΩÎ°ú ÏÑ§Ï†ï
template_paths = [
    Path.home() / "projects" / "template",
    Path(__file__).parent.parent / "template",
    Path(__file__).parent / "template",
]

# project_manager Í≤ΩÎ°ú Ï∞æÍ∏∞
for template_dir in template_paths:
    if template_dir.exists() and (template_dir / "project_manager").exists():
        sys.path.insert(0, str(template_dir))
        break
else:
    print("‚ùå Error: project_manager not found in any of these locations:")
    for path in template_paths:
        print(f"   - {path}")
    print("\nüí° Solutions:")
    print("   1. Make sure the template directory exists at ~/projects/template")
    print("   2. Or run: python ~/projects/template/install_project_manager.py .")
    sys.exit(1)

try:
    from project_manager import ProjectAPI
except ImportError as e:
    print(f"‚ùå Error importing project_manager: {e}")
    print("üí° Make sure all dependencies are installed")
    sys.exit(1)


def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    print(f"üöÄ Starting {PROJECT_NAME}...")
    print(f"üìã Type: {PROJECT_TYPE}")
    print(f"üîå Port Range: {PORT_RANGE[0]}-{PORT_RANGE[1]}")
    print(f"üéØ Default Port: {DEFAULT_PORT}")
    print("=" * 50)
    
    # API Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    api = ProjectAPI(
        name=PROJECT_NAME,
        project_type=PROJECT_TYPE,
        port_range=PORT_RANGE,
        working_directory=os.getcwd(),
        enable_health_checks=True
    )
    
    try:
        # ÌîÑÎ°úÏ†ùÌä∏ ÏãúÏûë
        print("‚è≥ Starting project...")
        result = api.start(port=DEFAULT_PORT)
        
        if result.success:
            print(f"\n‚úÖ {PROJECT_NAME} started successfully!")
            
            # Í≤∞Í≥º Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Ï†ïÎ≥¥ Ï∂îÏ∂ú
            if hasattr(result, 'data') and result.data:
                if isinstance(result.data, dict):
                    print(f"üåê URL: {result.data.get('url', 'N/A')}")
                    print(f"üîå Port: {result.data.get('port', 'N/A')}")
                    print(f"üìä PID: {result.data.get('pid', 'N/A')}")
                else:
                    print(f"üåê URL: {getattr(result.data, 'url', 'N/A')}")
                    print(f"üîå Port: {getattr(result.data, 'port', 'N/A')}")
                    print(f"üìä PID: {getattr(result.data, 'pid', 'N/A')}")
            
            print("\n" + "=" * 50)
            print("üì± Project is running!")
            print("üõë Press Ctrl+C to stop...")
            print("=" * 50)
            
            # Ïã§Ìñâ Ïú†ÏßÄ
            try:
                while True:
                    import time
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\n\nüõë Interrupt received, stopping project...")
        
        else:
            print(f"\n‚ùå Failed to start {PROJECT_NAME}!")
            print(f"üí¨ Error: {result.message}")
            
            # ÏóêÎü¨ Î©îÏãúÏßÄÏóê Îî∞Î•∏ ÎèÑÏõÄÎßê
            error_msg = str(result.message).lower()
            if "command" in error_msg or "npm" in error_msg:
                print("\nüîç Troubleshooting tips:")
                print("  ‚Ä¢ Make sure you have npm installed")
                print("  ‚Ä¢ Run 'npm install' in your project directory")
                print("  ‚Ä¢ Check if package.json exists")
                print("  ‚Ä¢ Verify your start command in package.json")
            elif "port" in error_msg:
                print("\nüîç Port troubleshooting:")
                print("  ‚Ä¢ Check if another process is using the port")
                print(f"  ‚Ä¢ Try: lsof -i :{DEFAULT_PORT}")
                print("  ‚Ä¢ The system will try other ports in the range automatically")
            
            return False
    
    except Exception as e:
        print(f"\nüí• Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        # Ï†ïÎ¶¨ ÏûëÏóÖ
        print("\nüßπ Cleaning up...")
        try:
            stop_result = api.stop()
            if stop_result.success:
                print("‚úÖ Project stopped successfully!")
            else:
                print(f"‚ö†Ô∏è Warning during stop: {stop_result.message}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error during cleanup: {e}")
    
    return True


def check_status():
    """ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÌÉú ÌôïÏù∏"""
    try:
        api = ProjectAPI(
            name=PROJECT_NAME,
            project_type=PROJECT_TYPE,
            port_range=PORT_RANGE,
            working_directory=os.getcwd()
        )
        status = api.status()
        
        print(f"üìä {PROJECT_NAME} Status")
        print("=" * 40)
        print(f"Status: {status.project_status}")
        print(f"Port: {status.port or 'N/A'}")
        print(f"URL: {status.url or 'N/A'}")
        print(f"Health: {status.health_status or 'N/A'}")
        print(f"PID: {status.pid or 'N/A'}")
        
        if hasattr(status, 'uptime_seconds') and status.uptime_seconds:
            hours = int(status.uptime_seconds // 3600)
            minutes = int((status.uptime_seconds % 3600) // 60)
            seconds = int(status.uptime_seconds % 60)
            print(f"Uptime: {hours}h {minutes}m {seconds}s")
    
    except Exception as e:
        print(f"‚ùå Error checking status: {e}")


if __name__ == "__main__":
    # Î™ÖÎ†πÏ§Ñ ÏòµÏÖò Ï≤òÎ¶¨
    if len(sys.argv) > 1:
        if sys.argv[1] == "status":
            check_status()
            sys.exit(0)
        elif sys.argv[1] == "help":
            print("Usage:")
            print("  python start.py        # Start the project")
            print("  python start.py status # Check project status")
            print("  python start.py help   # Show this help")
            sys.exit(0)
    
    # Î©îÏù∏ Ìï®Ïàò Ïã§Ìñâ
    success = main()
    sys.exit(0 if success else 1)
